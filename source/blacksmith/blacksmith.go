package blacksmith

import (
	"fmt"
	"time"

	"github.com/Alexanger300/projet-red_Forge/asset/css"
	"github.com/Alexanger300/projet-red_Forge/source/character"
	"github.com/Alexanger300/projet-red_Forge/source/equipment"
)

// Assure que la map des armes est initialis√©e.

func ensureWeaponsMap(player *character.Character) {
	if player.Weapons == nil {
		player.Weapons = make(map[string]equipment.Equipment)
	}
}

// Retire une quantit√© d‚Äôun item. Supprime la cl√© si quantit√© = 0.
func removeItem(player *character.Character, item string, qty int) {
	if qty <= 0 {
		return
	}
	if player.Inventory[item] >= qty {
		player.Inventory[item] -= qty
		if player.Inventory[item] == 0 {
			delete(player.Inventory, item)
		}
	}
}

func hasItem(player *character.Character, item string, qty int) bool {
	return player.Inventory[item] >= qty
}

func displayRequirement(player *character.Character, item string, needed int) string {
	have := player.Inventory[item]
	return fmt.Sprintf("%s (%d/%d)", item, have, needed)
}

func equipWeapon(player *character.Character, w equipment.Equipment) {
	ensureWeaponsMap(player)
	player.Weapons[w.Name] = w
	player.Equip.Weapon = w
	player.RecalculateStatsFromEquipment()
}

// Menu Principal du forgeron

func Welcome(player *character.Character) {
	css.Clear()
	text := "=== " + "‚öíÔ∏è " + " Bienvenue chez le forgeron ==="
	for _, char := range text {
		fmt.Printf("%c", char)
		time.Sleep(30 * time.Millisecond)
	}
	time.Sleep(500 * time.Millisecond)
	text1 := "\nJe peux forger de l'√©quipement pour vous ou am√©liorer ce que vous poss√©dez."
	for _, char := range text1 {
		fmt.Printf("%c", char)
		time.Sleep(30 * time.Millisecond)
	}
	time.Sleep(1 * time.Second)

	for {
		fmt.Println("\nQue souhaitez-vous faire ?")
		fmt.Println("1. Forger un √©quipement")
		fmt.Println("2. Am√©liorer votre √©quipement")
		fmt.Println("3. Quitter")

		var choice int
		fmt.Print("Votre choix : ")
		fmt.Scan(&choice)

		switch choice {
		case 1:
			forgeEquipment(player)
		case 2:
			improveEquipment(player)
		case 3:
			fmt.Println("Au revoir !")
			css.Clear()
			return
		default:
			fmt.Println("‚ùå Choix invalide, essayez encore.")
		}
	}
}

// 	Forger l'√©quipement selon la classe

func forgeEquipment(player *character.Character) {
	fmt.Println("\n--- üî® Forge ---")
	fmt.Println("Voici les recettes disponibles :")

	var choice int

	switch player.Class {

	// Pour Paladin
	case "Paladin":
		fmt.Println("1. √âp√©e sacr√©e ‚öîÔ∏è ‚Üí",
			displayRequirement(player, "Peau de gobelin", 2)+",",
			displayRequirement(player, "Lingot de fer", 1)+",",
			fmt.Sprintf("Or (%d/10)", player.Wallet.Amount))
		fmt.Println("2. Casque de paladin ü™ñ ‚Üí",
			displayRequirement(player, "Lingot de fer", 2)+",",
			displayRequirement(player, "Branche d'arbre", 1)+",",
			fmt.Sprintf("Or (%d/8)", player.Wallet.Amount))
		fmt.Println("3. Armure b√©nie üõ°Ô∏è ‚Üí",
			displayRequirement(player, "Lingot de fer", 3)+",",
			displayRequirement(player, "Cristal de vie", 1)+",",
			fmt.Sprintf("Or (%d/15)", player.Wallet.Amount))
		fmt.Println("4. Jambi√®res lourdes ü¶µ ‚Üí",
			displayRequirement(player, "Lingot de fer", 2)+",",
			displayRequirement(player, "Pierre de vie", 1)+",",
			fmt.Sprintf("Or (%d/12)", player.Wallet.Amount))
		fmt.Println("0. Retour")
		fmt.Print("Votre choix : ")
		fmt.Scan(&choice)

		switch choice {
		case 1:
			if player.Wallet.Amount >= 10 &&
				hasItem(player, "Peau de gobelin", 2) &&
				hasItem(player, "Lingot de fer", 1) {
				removeItem(player, "Peau de gobelin", 2)
				removeItem(player, "Lingot de fer", 1)
				player.Wallet.Spend(10)
				weapon := equipment.Equipment{Name: "√âp√©e sacr√©e", Atk: 5, Slot: "Weapon", Class: "Paladin"}
				equipWeapon(player, weapon)
				fmt.Println("‚úÖ Vous avez forg√© une √âp√©e sacr√©e (+5 ATK) !")
			} else {
				fmt.Println("‚ùå Pas assez d'or ou de ressources.")
			}
		case 2:
			if player.Wallet.Amount >= 8 &&
				hasItem(player, "Lingot de fer", 2) &&
				hasItem(player, "Branche d'arbre", 1) {
				removeItem(player, "Lingot de fer", 2)
				removeItem(player, "Branche d'arbre", 1)
				player.Wallet.Spend(8)
				player.Equip.Head = equipment.Equipment{Name: "Casque de paladin", Def: 5, Slot: "Head", Class: "Paladin"}
				player.RecalculateStatsFromEquipment()
				fmt.Println("‚úÖ Vous avez forg√© un Casque de paladin (+5 DEF) !")
			} else {
				fmt.Println("‚ùå Pas assez d'or ou de ressources.")
			}
		case 3:
			if player.Wallet.Amount >= 15 &&
				hasItem(player, "Lingot de fer", 3) &&
				hasItem(player, "Cristal de vie", 1) {
				removeItem(player, "Lingot de fer", 3)
				removeItem(player, "Cristal de vie", 1)
				player.Wallet.Spend(15)
				player.Equip.Body = equipment.Equipment{Name: "Armure b√©nie", Def: 8, HP: 20, Slot: "Body", Class: "Paladin"}
				player.RecalculateStatsFromEquipment()
				fmt.Println("‚úÖ Vous avez forg√© une Armure b√©nie (+8 DEF, +20 HP) !")
			} else {
				fmt.Println("‚ùå Pas assez d'or ou de ressources.")
			}
		case 4:
			if player.Wallet.Amount >= 12 &&
				hasItem(player, "Lingot de fer", 2) &&
				hasItem(player, "Pierre de vie", 1) {
				removeItem(player, "Lingot de fer", 2)
				removeItem(player, "Pierre de vie", 1)
				player.Wallet.Spend(12)
				player.Equip.Legs = equipment.Equipment{Name: "Jambi√®res lourdes", Def: 6, Spd: -1, Slot: "Legs", Class: "Paladin"}
				player.RecalculateStatsFromEquipment()
				fmt.Println("‚úÖ Vous avez forg√© des Jambi√®res lourdes (+6 DEF, -1 SPD) !")
			} else {
				fmt.Println("‚ùå Pas assez d'or ou de ressources.")
			}
		}

	// Pour G√©ant
	case "G√©ant":
		fmt.Println("1. Gantelets colossaux ü™ì ‚Üí",
			displayRequirement(player, "Cuir de sanglier", 2)+",",
			displayRequirement(player, "Fourrure de loup", 1)+",",
			fmt.Sprintf("Or (%d/10)", player.Wallet.Amount))
		fmt.Println("2. Heaume massif ü™ñ ‚Üí",
			displayRequirement(player, "Lingot de fer", 2)+",",
			displayRequirement(player, "Cuir de sanglier", 1)+",",
			fmt.Sprintf("Or (%d/8)", player.Wallet.Amount))
		fmt.Println("3. Plastron de colosse üõ°Ô∏è ‚Üí",
			displayRequirement(player, "Lingot de fer", 3)+",",
			displayRequirement(player, "Pierre de vie", 1)+",",
			fmt.Sprintf("Or (%d/15)", player.Wallet.Amount))
		fmt.Println("4. Jambi√®res de pierre ü¶µ ‚Üí",
			displayRequirement(player, "Lingot de fer", 2)+",",
			displayRequirement(player, "Fourrure de loup", 1)+",",
			fmt.Sprintf("Or (%d/12)", player.Wallet.Amount))
		fmt.Println("0. Retour")
		fmt.Print("Votre choix : ")
		fmt.Scan(&choice)

		switch choice {
		case 1:
			if player.Wallet.Amount >= 10 &&
				hasItem(player, "Cuir de sanglier", 2) &&
				hasItem(player, "Fourrure de loup", 1) {
				removeItem(player, "Cuir de sanglier", 2)
				removeItem(player, "Fourrure de loup", 1)
				player.Wallet.Spend(10)
				weapon := equipment.Equipment{Name: "Gantelets colossaux", Atk: 7, Slot: "Weapon", Class: "G√©ant"}
				equipWeapon(player, weapon)
				fmt.Println("‚úÖ Vous avez forg√© des Gantelets colossaux (+7 ATK) !")
			} else {
				fmt.Println("‚ùå Pas assez d'or ou de ressources.")
			}
		case 2:
			if player.Wallet.Amount >= 8 &&
				hasItem(player, "Lingot de fer", 2) &&
				hasItem(player, "Cuir de sanglier", 1) {
				removeItem(player, "Lingot de fer", 2)
				removeItem(player, "Cuir de sanglier", 1)
				player.Wallet.Spend(8)
				player.Equip.Head = equipment.Equipment{Name: "Heaume massif", Def: 6, Slot: "Head", Class: "G√©ant"}
				player.RecalculateStatsFromEquipment()
				fmt.Println("‚úÖ Vous avez forg√© un Heaume massif (+6 DEF) !")
			} else {
				fmt.Println("‚ùå Pas assez d'or ou de ressources.")
			}
		case 3:
			if player.Wallet.Amount >= 15 &&
				hasItem(player, "Lingot de fer", 3) &&
				hasItem(player, "Pierre de vie", 1) {
				removeItem(player, "Lingot de fer", 3)
				removeItem(player, "Pierre de vie", 1)
				player.Wallet.Spend(15)
				player.Equip.Body = equipment.Equipment{Name: "Plastron de colosse", Def: 10, HP: 25, Slot: "Body", Class: "G√©ant"}
				player.RecalculateStatsFromEquipment()
				fmt.Println("‚úÖ Vous avez forg√© un Plastron de colosse (+10 DEF, +25 HP) !")
			} else {
				fmt.Println("‚ùå Pas assez d'or ou de ressources.")
			}
		case 4:
			if player.Wallet.Amount >= 12 &&
				hasItem(player, "Lingot de fer", 2) &&
				hasItem(player, "Fourrure de loup", 1) {
				removeItem(player, "Lingot de fer", 2)
				removeItem(player, "Fourrure de loup", 1)
				player.Wallet.Spend(12)
				player.Equip.Legs = equipment.Equipment{Name: "Jambi√®res de pierre", Def: 7, Spd: -2, Slot: "Legs", Class: "G√©ant"}
				player.RecalculateStatsFromEquipment()
				fmt.Println("‚úÖ Vous avez forg√© des Jambi√®res de pierre (+7 DEF, -2 SPD) !")
			} else {
				fmt.Println("‚ùå Pas assez d'or ou de ressources.")
			}
		}

	// Pour Mage
	case "Mage":
		fmt.Println("1. Grimoire ancien üìñ ‚Üí",
			displayRequirement(player, "Parchemin ancien", 1)+",",
			displayRequirement(player, "Cristal magique", 2)+",",
			fmt.Sprintf("Or (%d/10)", player.Wallet.Amount))
		fmt.Println("2. Chapeau mystique üé© ‚Üí",
			displayRequirement(player, "Cristal magique", 1)+",",
			displayRequirement(player, "Branche d'arbre", 2)+",",
			fmt.Sprintf("Or (%d/8)", player.Wallet.Amount))
		fmt.Println("3. Robe enchant√©e üß• ‚Üí",
			displayRequirement(player, "Cristal magique", 2)+",",
			displayRequirement(player, "Pierre de vie", 1)+",",
			fmt.Sprintf("Or (%d/15)", player.Wallet.Amount))
		fmt.Println("4. Bottes de l√©vitation üë¢ ‚Üí",
			displayRequirement(player, "Cristal magique", 1)+",",
			displayRequirement(player, "Peau de gobelin", 2)+",",
			fmt.Sprintf("Or (%d/12)", player.Wallet.Amount))
		fmt.Println("0. Retour")
		fmt.Print("Votre choix : ")
		fmt.Scan(&choice)

		switch choice {
		case 1:
			if player.Wallet.Amount >= 10 &&
				hasItem(player, "Parchemin ancien", 1) &&
				hasItem(player, "Cristal magique", 2) {
				removeItem(player, "Parchemin ancien", 1)
				removeItem(player, "Cristal magique", 2)
				player.Wallet.Spend(10)
				weapon := equipment.Equipment{Name: "Grimoire ancien", Atk: 4, Mana: 15, Slot: "Weapon", Class: "Mage"}
				equipWeapon(player, weapon)
				fmt.Println("‚úÖ Vous avez forg√© un Grimoire ancien (+4 ATK, +15 Mana) !")
			} else {
				fmt.Println("‚ùå Pas assez d'or ou de ressources.")
			}
		case 2:
			if player.Wallet.Amount >= 8 &&
				hasItem(player, "Cristal magique", 1) &&
				hasItem(player, "Branche d'arbre", 2) {
				removeItem(player, "Cristal magique", 1)
				removeItem(player, "Branche d'arbre", 2)
				player.Wallet.Spend(8)
				player.Equip.Head = equipment.Equipment{Name: "Chapeau mystique", Def: 3, Mana: 10, Slot: "Head", Class: "Mage"}
				player.RecalculateStatsFromEquipment()
				fmt.Println("‚úÖ Vous avez forg√© un Chapeau mystique (+3 DEF, +10 Mana) !")
			} else {
				fmt.Println("‚ùå Pas assez d'or ou de ressources.")
			}
		case 3:
			if player.Wallet.Amount >= 15 &&
				hasItem(player, "Cristal magique", 2) &&
				hasItem(player, "Pierre de vie", 1) {
				removeItem(player, "Cristal magique", 2)
				removeItem(player, "Pierre de vie", 1)
				player.Wallet.Spend(15)
				player.Equip.Body = equipment.Equipment{Name: "Robe enchant√©e", Def: 4, Mana: 15, Slot: "Body", Class: "Mage"}
				player.RecalculateStatsFromEquipment()
				fmt.Println("‚úÖ Vous avez forg√© une Robe enchant√©e (+4 DEF, +15 Mana) !")
			} else {
				fmt.Println("‚ùå Pas assez d'or ou de ressources.")
			}
		case 4:
			if player.Wallet.Amount >= 12 &&
				hasItem(player, "Cristal magique", 1) &&
				hasItem(player, "Peau de gobelin", 2) {
				removeItem(player, "Cristal magique", 1)
				removeItem(player, "Peau de gobelin", 2)
				player.Wallet.Spend(12)
				player.Equip.Legs = equipment.Equipment{Name: "Bottes de l√©vitation", Spd: 3, Mana: 5, Slot: "Legs", Class: "Mage"}
				player.RecalculateStatsFromEquipment()
				fmt.Println("‚úÖ Vous avez forg√© des Bottes de l√©vitation (+3 SPD, +5 Mana) !")
			} else {
				fmt.Println("‚ùå Pas assez d'or ou de ressources.")
			}
		}

	// Pour Gu√©risseur
	case "Gu√©risseur":
		fmt.Println("1. B√¢ton de vie üåø ‚Üí",
			displayRequirement(player, "Branche d'arbre", 3)+",",
			displayRequirement(player, "Pierre de vie", 1)+",",
			fmt.Sprintf("Or (%d/10)", player.Wallet.Amount))
		fmt.Println("2. Capuche de pr√™tre üß¢ ‚Üí",
			displayRequirement(player, "Branche d'arbre", 2)+",",
			displayRequirement(player, "Cristal de vie", 1)+",",
			fmt.Sprintf("Or (%d/8)", player.Wallet.Amount))
		fmt.Println("3. Robe de lumi√®re ‚ú® ‚Üí",
			displayRequirement(player, "Cristal de vie", 2)+",",
			displayRequirement(player, "Pierre de vie", 1)+",",
			fmt.Sprintf("Or (%d/15)", player.Wallet.Amount))
		fmt.Println("4. Sandales b√©nies üë° ‚Üí",
			displayRequirement(player, "Branche d'arbre", 2)+",",
			displayRequirement(player, "Peau de gobelin", 1)+",",
			fmt.Sprintf("Or (%d/12)", player.Wallet.Amount))
		fmt.Println("0. Retour")
		fmt.Print("Votre choix : ")
		fmt.Scan(&choice)

		switch choice {
		case 1:
			if player.Wallet.Spend(10) &&
				hasItem(player, "Branche d'arbre", 3) &&
				hasItem(player, "Pierre de vie", 1) {
				removeItem(player, "Branche d'arbre", 3)
				removeItem(player, "Pierre de vie", 1)
				weapon := equipment.Equipment{Name: "B√¢ton de vie", Atk: 3, Mana: 10, Slot: "Weapon", Class: "Gu√©risseur"}
				equipWeapon(player, weapon)
				fmt.Println("‚úÖ Vous avez forg√© un B√¢ton de vie (+3 ATK, +10 Mana) !")
			} else {
				fmt.Println("‚ùå Pas assez d'or ou de ressources.")
			}
		case 2:
			if player.Wallet.Spend(8) &&
				hasItem(player, "Branche d'arbre", 2) &&
				hasItem(player, "Cristal de vie", 1) {
				removeItem(player, "Branche d'arbre", 2)
				removeItem(player, "Cristal de vie", 1)
				player.Equip.Head = equipment.Equipment{Name: "Capuche de pr√™tre", Def: 2, Mana: 5, Slot: "Head", Class: "Gu√©risseur"}
				player.RecalculateStatsFromEquipment()
				fmt.Println("‚úÖ Vous avez forg√© une Capuche de pr√™tre (+2 DEF, +5 Mana) !")
			} else {
				fmt.Println("‚ùå Pas assez d'or ou de ressources.")
			}
		case 3:
			if player.Wallet.Spend(15) &&
				hasItem(player, "Cristal de vie", 2) &&
				hasItem(player, "Pierre de vie", 1) {
				removeItem(player, "Cristal de vie", 2)
				removeItem(player, "Pierre de vie", 1)
				player.Equip.Body = equipment.Equipment{Name: "Robe de lumi√®re", Def: 5, Mana: 10, HP: 10, Slot: "Body", Class: "Gu√©risseur"}
				player.RecalculateStatsFromEquipment()
				fmt.Println("‚úÖ Vous avez forg√© une Robe de lumi√®re (+5 DEF, +10 Mana, +10 HP) !")
			} else {
				fmt.Println("‚ùå Pas assez d'or ou de ressources.")
			}
		case 4:
			if player.Wallet.Spend(12) &&
				hasItem(player, "Branche d'arbre", 2) &&
				hasItem(player, "Peau de gobelin", 1) {
				removeItem(player, "Branche d'arbre", 2)
				removeItem(player, "Peau de gobelin", 1)
				player.Equip.Legs = equipment.Equipment{Name: "Sandales b√©nies", Spd: 2, Slot: "Legs", Class: "Gu√©risseur"}
				player.RecalculateStatsFromEquipment()
				fmt.Println("‚úÖ Vous avez forg√© des Sandales b√©nies (+2 SPD) !")
			} else {
				fmt.Println("‚ùå Pas assez d'or ou de ressources.")
			}
		}
	default:
		fmt.Println("‚ùå Classe non g√©r√©e pour la forge.")
	}
}

// Am√©liorer l'√©quipement existant

func improveEquipment(player *character.Character) {
	fmt.Println("\n--- üîß Am√©lioration d'√âquipement ---")
	fmt.Println("1. Am√©liorer une armure (15 or)")
	fmt.Println("2. Am√©liorer une arme (25 or)")
	fmt.Println("0. Retour")

	var choice int
	fmt.Print("Votre choix : ")
	fmt.Scan(&choice)

	switch choice {
	case 1:
		if player.Equip.Head.Name == "" && player.Equip.Body.Name == "" && player.Equip.Legs.Name == "" {
			fmt.Println("‚ùå Vous n'avez aucune armure √©quip√©e √† am√©liorer.")
			return
		}

		fmt.Println("\nQuelle pi√®ce voulez-vous am√©liorer ?")
		i := 1
		choices := make(map[int]*equipment.Equipment)

		if player.Equip.Head.Name != "" {
			fmt.Printf("%d. Casque : %s\n", i, player.Equip.Head.Name)
			choices[i] = &player.Equip.Head
			i++
		}
		if player.Equip.Body.Name != "" {
			fmt.Printf("%d. Armure : %s\n", i, player.Equip.Body.Name)
			choices[i] = &player.Equip.Body
			i++
		}
		if player.Equip.Legs.Name != "" {
			fmt.Printf("%d. Jambi√®res : %s\n", i, player.Equip.Legs.Name)
			choices[i] = &player.Equip.Legs
			i++
		}

		var partChoice int
		fmt.Print("Votre choix : ")
		fmt.Scan(&partChoice)

		chosen, ok := choices[partChoice]
		if !ok {
			fmt.Println("‚ùå Choix invalide.")
			return
		}

		if player.Wallet.Spend(15) {
			chosen.Def += 5
			player.RecalculateStatsFromEquipment()
			fmt.Printf("‚úÖ %s am√©lior√©(e) ! DEF +5\n", chosen.Name)
		} else {
			fmt.Println("‚ùå Pas assez d'or.")
		}

	case 2:
		if player.Equip.Weapon.Name == "" {
			fmt.Println("‚ùå Vous n'avez aucune arme forg√©e √† am√©liorer.")
			return
		}
		if player.Wallet.Spend(25) {
			player.Equip.Weapon.Atk += 5
			// Met √† jour l'arme dans l'inventaire
			ensureWeaponsMap(player)
			player.Weapons[player.Equip.Weapon.Name] = player.Equip.Weapon
			player.RecalculateStatsFromEquipment()
			fmt.Printf("‚úÖ Votre arme %s a √©t√© am√©lior√©e ! ATK +5\n", player.Equip.Weapon.Name)
		} else {
			fmt.Println("‚ùå Pas assez d'or.")
		}

	case 0:
		return
	default:
		fmt.Println("‚ùå Choix invalide, essaie encore.")
	}
}
